#include "${class_name}$Executor.h"

namespace Game::ExecutionBlock
{

    static ${class_name}$::ExternalContexts externalContexts;

    void ${class_name}$::loadContext() noexcept
    {
${contexts_local = executor_data.get("contextsLocal")}$
${if contexts_local is not None:}$
${for context in contexts_local:}$
${for element in context["list"]:}$
        ${"this->{}Context.load();".format(element)}$
${:end-for}$
${:end-for}$

${:end-if}$
${for context in external_contexts:}$
        externalContexts.${"", context.context_name}$Context.load();
${:end-for}$

    }

    void ${class_name}$::initiate() noexcept
    {
        this->initImpl(externalContexts);
    }

    void ${class_name}$::update(float dt) noexcept
    {
        this->updateImpl(externalContexts, dt);
    }

    void ${class_name}$::flushSharedLocalContexts() noexcept
    {
${contexts_to_flush = executor_data.get("contextsToFlush")}$
${if contexts_to_flush is not None:}$
${for flush_context in contexts_to_flush:}$
        ${"this->{}Context.reset();".format(flush_context)}$
${:end-for}$
${:end-if}$
    }

    ${class_name}$::CExternalContexts Game::ExecutionBlock::${class_name}$::getExternalContext() noexcept
    {
        return CExternalContexts
        {
${for context in external_contexts:}$
            .${"", context.context_name}$Context = Context::${"", to_class_name(context.context_type)}$::convertToConst(externalContexts.${"", context.context_name}$Context),
${:end-for}$
        };
    }

}
